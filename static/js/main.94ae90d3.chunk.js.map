{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","request","a","fetch","response","json","FindMovie","setMovies","useState","setMovie","isError","setError","query","setInput","isMovieExist","setIsMovieExist","findMovie","newMovie","Response","Title","Plot","Poster","imdbID","onSubmit","event","preventDefault","some","movieInList","htmlFor","type","id","value","placeholder","onChange","target","onClick","App","moviesOnPage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94ae90d3.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = 'https://www.omdbapi.com/?apikey=39e399d8&t=';\n\nexport const request = async(title) => {\n  const response = await fetch(`${BASE_URL}${title}`);\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport PropTypes from 'prop-types';\n\nimport { MovieCard } from '../MovieCard';\nimport { request } from '../../api/api';\n\nexport const FindMovie = ({ setMovies, movies }) => {\n  const [movie, setMovie] = useState(null);\n  const [isError, setError] = useState(false);\n  const [query, setInput] = useState('');\n  const [isMovieExist, setIsMovieExist] = useState(false);\n\n  const handleChangeQuery = (event) => {\n    const { value } = event.target;\n\n    setInput(value);\n    setError(false);\n  };\n\n  const findMovie = async() => {\n    const newMovie = await request(query);\n\n    if (newMovie.Response === 'False') {\n      setError(true);\n\n      return;\n    }\n\n    setMovie({\n      title: newMovie.Title,\n      description: newMovie.Plot,\n      imgUrl: newMovie.Poster,\n      imdbID: newMovie.imdbID,\n      imdbUrl: `https://www.imdb.com/title/${newMovie.imdbID}`,\n    });\n    setError(false);\n    setIsMovieExist(false);\n  };\n\n  const addNewMovie = (event) => {\n    event.preventDefault();\n\n    if (!movie) {\n      setError(true);\n\n      return;\n    }\n\n    if (movies.some(movieInList => movie.imdbID === movieInList.imdbID)) {\n      setIsMovieExist(true);\n\n      return;\n    }\n\n    setMovies([...movies, movie]);\n\n    setMovie(null);\n    setError(false);\n    setInput('');\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={addNewMovie}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              value={query}\n              placeholder=\"Enter a title to search\"\n              className={\n                isError\n                  ? 'input is-danger'\n                  : 'input is-success'\n              }\n              onChange={handleChangeQuery}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={findMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-primary\"\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {isMovieExist && (\n        <h2 className=\"title\">\n          This movie is already exist\n        </h2>\n      )}\n\n      {!isError && movie && !isMovieExist && (\n        <div className=\"container\">\n          <h2 className=\"title\">\n            Preview\n          </h2>\n          <MovieCard {...movie} />\n        </div>\n      )}\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  setMovies: PropTypes.func.isRequired,\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n      imdbID: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport moviesOnPage from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesOnPage);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          setMovies={setMovies}\n          movies={movies}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}